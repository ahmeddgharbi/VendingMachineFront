{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ghaahm\\\\frontend\\\\src\\\\Components\\\\Others\\\\SessionViewer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useContext } from \"react\";\nimport { UserContext } from \"../../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SessionViewer = () => {\n  _s();\n\n  var _session$user;\n\n  const [user, setUser] = useContext(UserContext);\n  const [session, setSession] = useState({});\n  useEffect(() => {\n    const session = JSON.parse(localStorage.getItem(\"session\"));\n    console.log(session);\n\n    if (session !== null && session !== void 0 && session.key) {\n      setSession(session);\n    }\n  }, []);\n\n  function handleDestroyAllSession() {\n    console.log(\"logout\");\n    const session = JSON.parse(localStorage.getItem(\"session\"));\n    console.log(session);\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: session.user.email,\n        session: session.key\n      })\n    };\n    fetch(`http://localhost:3005/api/users/logout/all`, requestOptions).then(res => res.json()).then(data => {\n      console.log(data);\n\n      if (data.message === \"Logged out of all sessions\") {\n        console.log(\"session destroyed 222\");\n        setSession({ ...session,\n          user: data.user\n        });\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: ((_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.sessions.length) > 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loginText\",\n        className: \"d-flex flex-column justify-content-center my-3  py-2 rounded bg-warning mx-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"d-flex justify-content-center\",\n          children: \"There is already an active session using your account. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-danger rounded mt-2 d-block mx-auto\",\n            onClick: handleDestroyAllSession,\n            children: \"Terminate All Other Sessions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SessionViewer, \"Np6x3Z/evPYq5YaGT3MhXJWkxa8=\");\n\n_c = SessionViewer;\nexport default SessionViewer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionViewer\");","map":{"version":3,"sources":["C:/Users/ghaahm/frontend/src/Components/Others/SessionViewer.js"],"names":["React","useEffect","useState","useContext","UserContext","SessionViewer","user","setUser","session","setSession","JSON","parse","localStorage","getItem","console","log","key","handleDestroyAllSession","requestOptions","method","headers","body","stringify","email","fetch","then","res","json","data","message","sessions","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,WAA5B;;;;AACA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,UAAU,CAACC,WAAD,CAAlC;AAEA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,OAAO,GAAGE,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;;AACA,QAAIA,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEQ,GAAb,EAAkB;AAChBP,MAAAA,UAAU,CAACD,OAAD,CAAV;AACD;AACF,GANQ,EAMN,EANM,CAAT;;AAQA,WAASS,uBAAT,GAAmC;AACjCH,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAMP,OAAO,GAAGE,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACA,UAAMU,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFY;AAGrBC,MAAAA,IAAI,EAAEX,IAAI,CAACY,SAAL,CAAe;AAAEC,QAAAA,KAAK,EAAEf,OAAO,CAACF,IAAR,CAAaiB,KAAtB;AAA6Bf,QAAAA,OAAO,EAAEA,OAAO,CAACQ;AAA9C,OAAf;AAHe,KAAvB;AAKAQ,IAAAA,KAAK,CAAE,4CAAF,EAA+CN,cAA/C,CAAL,CACGO,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdd,MAAAA,OAAO,CAACC,GAAR,CAAYa,IAAZ;;AACA,UAAIA,IAAI,CAACC,OAAL,KAAiB,4BAArB,EAAmD;AACjDf,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAN,QAAAA,UAAU,CAAC,EAAC,GAAGD,OAAJ;AAAaF,UAAAA,IAAI,EAAEsB,IAAI,CAACtB;AAAxB,SAAD,CAAV;AACD;AACF,KARH;AAUD;;AAED,sBACE;AAAA,cACG,kBAAAE,OAAO,CAACF,IAAR,gEAAcwB,QAAd,CAAuBC,MAAvB,IAAgC,CAAhC,iBACC;AAAA,6BACE;AACE,QAAA,EAAE,EAAC,WADL;AAEE,QAAA,SAAS,EAAC,8EAFZ;AAAA,gCAIE;AAAI,UAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA,iCACA;AACI,YAAA,SAAS,EAAC,yCADd;AAEI,YAAA,OAAO,EAAEd,uBAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAzDD;;GAAMZ,a;;KAAAA,a;AA0DN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { UserContext } from \"../../App\";\r\nconst SessionViewer = () => {\r\n  const [user, setUser] = useContext(UserContext);\r\n\r\n  const [session, setSession] = useState({});\r\n\r\n  useEffect(() => {\r\n    const session = JSON.parse(localStorage.getItem(\"session\"));\r\n    console.log(session);\r\n    if (session?.key) {\r\n      setSession(session);\r\n    }\r\n  }, []);\r\n\r\n  function handleDestroyAllSession() {\r\n    console.log(\"logout\");\r\n    const session = JSON.parse(localStorage.getItem(\"session\"));\r\n    console.log(session);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email: session.user.email, session: session.key }),\r\n    };\r\n    fetch(`http://localhost:3005/api/users/logout/all`, requestOptions)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        if (data.message === \"Logged out of all sessions\") {\r\n          console.log(\"session destroyed 222\");\r\n          setSession({...session, user: data.user});          \r\n        }\r\n      });\r\n      \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {session.user?.sessions.length > 1 && (\r\n        <>\r\n          <div\r\n            id=\"loginText\"\r\n            className=\"d-flex flex-column justify-content-center my-3  py-2 rounded bg-warning mx-5\"\r\n          >\r\n            <h3 className=\"d-flex justify-content-center\">There is already an active session using your account. </h3>\r\n            <div>\r\n            <button\r\n                className=\"btn-danger rounded mt-2 d-block mx-auto\"\r\n                onClick={handleDestroyAllSession}\r\n              >\r\n                Terminate All Other Sessions\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default SessionViewer;\r\n"]},"metadata":{},"sourceType":"module"}